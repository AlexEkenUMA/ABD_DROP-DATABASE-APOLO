--EJERCICIO 3

--A

--IDENTIFICACION         --Nº DE LA TARJETA             --CANTIDAD
--123                       --1234                          10      €   

--123                       --1234                          20      €

SELECT T.CLIENTE_ID, T.N_DE_TARJETA, SUM(O.CANTIDAD) AS "GASTO", O.DIVISA_ABREVIATURA, TO_CHAR(O.FECHA_OP, 'MM/YYYY') "FECHA"
FROM TARJETA T, OPERACION O
WHERE T.N_DE_TARJETA = O.TARJETA_N_DE_TARJETA
GROUP BY T.CLIENTE_ID, T.N_DE_TARJETA, O.DIVISA_ABREVIATURA,  TO_CHAR(O.FECHA_OP, 'MM/YYYY');



CREATE OR REPLACE VIEW V_TARJETA_MENSUAL AS
SELECT T.CLIENTE_ID, T.N_DE_TARJETA, SUM(O.CANTIDAD) AS "GASTO", O.DIVISA_ABREVIATURA, TO_CHAR(O.FECHA_OP, 'MM/YYYY') "FECHA"
FROM TARJETA T, OPERACION O
WHERE T.N_DE_TARJETA = O.TARJETA_N_DE_TARJETA
GROUP BY T.CLIENTE_ID, T.N_DE_TARJETA, O.DIVISA_ABREVIATURA,  TO_CHAR(O.FECHA_OP, 'MM/YYYY');

SELECT * FROM V_TARJETA_MENSUAL;



--B


SELECT C.IDENTIFICACION, T.N_DE_TARJETA,COUNT(*) AS "PENDIENTE", O.DIVISA_ABREVIATURA AS "ABREVIATURA" FROM CLIENTE C, TARJETA T, OPERACION O
WHERE C.ID = T.CLIENTE_ID AND T.N_DE_TARJETA = O.TARJETA_N_DE_TARJETA AND O.ESTADO = 'PENDIENTE'
GROUP BY C.IDENTIFICACION,  T.N_DE_TARJETA, O.DIVISA_ABREVIATURA;


CREATE OR REPLACE VIEW V_PAGOS_PENDIENTES AS
SELECT C.IDENTIFICACION, T.N_DE_TARJETA,COUNT(*) AS "PENDIENTE", O.DIVISA_ABREVIATURA AS "ABREVIATURA" FROM CLIENTE C, TARJETA T, OPERACION O
WHERE C.ID = T.CLIENTE_ID AND T.N_DE_TARJETA = O.TARJETA_N_DE_TARJETA AND O.ESTADO = 'PENDIENTE'
GROUP BY C.IDENTIFICACION,  T.N_DE_TARJETA, O.DIVISA_ABREVIATURA;

SELECT * FROM V_PAGOS_PENDIENTES;





--C

set SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE P_COBRO 
IS 
    CURSOR COBRO IS 
    SELECT  O.TARJETA_N_DE_TARJETA, O.MODO_OPERACION, O.ESTADO, O.ID, O.DIVISA_ABREVIATURA, O.CANTIDAD
    FROM OPERACION O;
    COBRO_REC COBRO%ROWTYPE;
    
    CUENTA VARCHAR2 (50);
    POOLED VARCHAR2(50);
    SEGREGADA VARCHAR2(50);
    REFERENCIA VARCHAR2(50);
    DEPOSITO VARCHAR2(50);
    
    BEGIN 
    FOR COBRO_REC IN COBRO 
    LOOP
    BEGIN
        IF COBRO_REC.MODO_OPERACION LIKE 'DEBITO' AND COBRO_REC.ESTADO LIKE 'PENDIENTE' THEN
            
            UPDATE OPERACION
            SET ESTADO = 'COBRADO'
            WHERE ID = COBRO_REC.ID;
            
            SELECT FINTECH_IBAN INTO CUENTA FROM TARJETA
            WHERE N_DE_TARJETA = COBRO_REC.TARJETA_N_DE_TARJETA;
            
            SELECT COUNT(*) INTO SEGREGADA FROM FINTECH 
            WHERE IBAN = CUENTA AND CLASIFICACION = 'SEGREGADA';
            
            IF SEGREGADA LIKE '1' THEN
                SELECT IBAN_CUENTAREF INTO REFERENCIA FROM SEGREGADA
                WHERE IBAN = CUENTA;
                
                UPDATE REFERENCIA 
                SET SALDO = SALDO - COBRO_REC.CANTIDAD
                WHERE IBAN = REFERENCIA;
            END IF;
            
            SELECT COUNT(*) INTO POOLED FROM FINTECH 
            WHERE IBAN = CUENTA AND CLASIFICACION = 'POOLED';
            
            IF POOLED LIKE '1' THEN
               
                SELECT R.IBAN INTO REFERENCIA FROM DEPOSITADA_EN D, REFERENCIA R
                WHERE D.POOLED_ACCOUNT_IBAN = CUENTA AND D.REFERENCIA_IBAN = R.IBAN  AND R.DIVISA_ABREVIATURA = COBRO_REC.DIVISA_ABREVIATURA;
                
                UPDATE DEPOSITADA_EN D
                SET SALDO = SALDO - COBRO_REC.CANTIDAD
                WHERE D.POOLED_ACCOUNT_IBAN = CUENTA AND D.REFERENCIA_IBAN = REFERENCIA;
                
                UPDATE REFERENCIA R 
                SET SALDO = SALDO - COBRO_REC.CANTIDAD
                WHERE R.IBAN = REFERENCIA;
            END IF;
        END IF;
        COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                INSERT INTO LOG_ERRORES VALUES ('OTHERS', 'EXECEPCION DURANTE LA EJECUCIÓN DE
                P_COBRO',
                SYSDATE);
                COMMIT;          
    END;
    END LOOP; 
    END;

/

EXECUTE P_COBRO;
 
 
 
 
 --D
 
 BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name           =>  'J_LIQUIDAR',
   job_type           =>  'PLSQL_BLOCK',
   job_action         =>  'BEGIN EXECUTE P_COBRO; END;',
   start_date         =>   SYSDATE,  
   repeat_interval    =>  'FREQ=MONTHLY; BYMONTHDAY=1; BYHOUR=00', 
   enabled            =>   TRUE, 
   comments           =>  'Cobra las transacciones que esten pendientes');
END; 
/ 

